const axios = require('axios');

const BASE_URL = 'http://localhost:3000';
const OLLAMA_URL = 'http://109.73.193.10:11434';

async function checkOllamaStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Ollama...');
  try {
    const response = await axios.get(`${OLLAMA_URL}/api/tags`);
    console.log('‚úÖ Ollama —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:', response.data.models || []);
    
    if (response.data.models && response.data.models.length === 0) {
      console.log('‚ö†Ô∏è  –ú–æ–¥–µ–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å llama2...');
      return await installModel();
    }
    
    return true;
  } catch (error) {
    console.log('‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return false;
  }
}

async function installModel() {
  console.log('üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å llama2...');
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –º–æ–¥–µ–ª—å
    const response = await axios.post(`${OLLAMA_URL}/api/pull`, {
      name: 'llama2:7b'
    }, {
      timeout: 300000 // 5 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
    });
    
    console.log('‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏:', error.message);
    console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –≤—Ä—É—á–Ω—É—é:');
    console.log('   ollama pull llama2');
    return false;
  }
}

async function testOllamaGenerate() {
  console.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞...');
  try {
    const response = await axios.post(`${OLLAMA_URL}/api/generate`, {
      model: 'llama2',
      prompt: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ.',
      stream: false
    }, {
      timeout: 30000
    });
    
    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('ü§ñ –û—Ç–≤–µ—Ç AI:', response.data.response);
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
    if (error.response?.status === 404) {
      console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    return false;
  }
}

async function testAiHealth() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  try {
    const response = await axios.get(`${BASE_URL}/ai/health`);
    console.log('‚úÖ AI —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üìä –°—Ç–∞—Ç—É—Å:', response.data);
    return true;
  } catch (error) {
    console.log('‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: npm run start:dev');
    return false;
  }
}

async function testResumeAnalysis() {
  console.log('\nüìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ...');
  
  const testResume = `
–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
Email: ivan.petrov@email.com
–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67

–û–ü–´–¢ –†–ê–ë–û–¢–´:
2020-2023 - Senior Developer –≤ TechCorp
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ React –∏ Node.js
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ 5 —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

–ù–ê–í–´–ö–ò:
JavaScript, TypeScript, React, Node.js, PostgreSQL
`;

  try {
    const response = await axios.post(`${BASE_URL}/ai/analyze-resume`, {
      resumeText: testResume
    }, {
      headers: {
        'Content-Type': 'application/json',
        // –î–æ–±–∞–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        // 'Authorization': 'Bearer your-token'
      }
    });
    
    if (response.data.success) {
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ —É—Å–ø–µ—à–µ–Ω');
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(response.data.data, null, 2));
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', response.data.error);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.response?.data || error.message);
    if (error.response?.status === 401) {
      console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }
  }
}

async function testChat() {
  console.log('\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç —Å AI...');
  try {
    const response = await axios.post(`${BASE_URL}/ai/chat`, {
      message: '–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ.'
    }, {
      headers: {
        'Content-Type': 'application/json',
        // 'Authorization': 'Bearer your-token'
      }
    });
    
    if (response.data.success) {
      console.log('‚úÖ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('ü§ñ –û—Ç–≤–µ—Ç AI:', response.data.data.response);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞:', response.data.error);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞:', error.response?.data || error.message);
  }
}

async function runLiveTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∂–∏–≤–æ–π —Ç–µ—Å—Ç AI –∞–≥–µ–Ω—Ç–∞...\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
  const ollamaOk = await checkOllamaStatus();
  if (!ollamaOk) {
    console.log('\n‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç.');
    return;
  }
  
  // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
  const generateOk = await testOllamaGenerate();
  if (!generateOk) {
    console.log('\n‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç...');
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const aiServiceOk = await testAiHealth();
  if (!aiServiceOk) {
    console.log('\n‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç.');
    return;
  }
  
  // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ AI
  await testResumeAnalysis();
  await testChat();
  
  console.log('\nüéâ –ñ–∏–≤–æ–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª—å: ollama pull llama2');
  console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run start:dev');
  console.log('3. –ü–æ–ª—É—á–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ AI –∞–≥–µ–Ω—Ç–∞');
}

runLiveTest().catch(console.error);
