const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testChat() {
  console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç —Å AI –∞–≥–µ–Ω—Ç–æ–º...\n');
  
  const testMessages = [
    '–ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ —Ç—ã –∏ —á—Ç–æ —É–º–µ–µ—à—å?',
    '–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –Ω—É–∂–Ω—ã –¥–ª—è frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞?',
    '–ü–æ–º–æ–≥–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è junior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
    '–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?',
    '–ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞?'
  ];
  
  for (let i = 0; i < testMessages.length; i++) {
    const message = testMessages[i];
    console.log(`üì§ –ó–∞–ø—Ä–æ—Å ${i + 1}: ${message}`);
    
    try {
      const response = await axios.post(`${BASE_URL}/ai-test/chat`, {
        message: message,
        model: 'gemma3:latest'
      });
      
      if (response.data.success) {
        console.log(`‚úÖ –û—Ç–≤–µ—Ç ${i + 1}:`);
        console.log(`ü§ñ ${response.data.data.response}`);
        console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${response.data.processingTime}ms`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${response.data.error}`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    
    console.log('\n' + '='.repeat(80) + '\n');
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
}

async function testCustomMessage() {
  console.log('üí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n');
  
  const customMessage = process.argv[2] || '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?';
  console.log(`üì§ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${customMessage}`);
  
  try {
    const response = await axios.post(`${BASE_URL}/ai-test/chat`, {
      message: customMessage,
      model: 'gemma3:latest'
    });
    
    if (response.data.success) {
      console.log('‚úÖ –û—Ç–≤–µ—Ç AI:');
      console.log(`ü§ñ ${response.data.data.response}`);
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${response.data.processingTime}ms`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${response.data.error}`);
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: npm run start:dev');
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —á–∞—Ç–∞ —Å AI –∞–≥–µ–Ω—Ç–æ–º...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (process.argv[2]) {
    await testCustomMessage();
  } else {
    await testChat();
  }
  
  console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log('\nüí° –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:');
  console.log('node test-chat-example.js "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"');
}

main().catch(console.error);
