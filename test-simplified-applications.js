/**
 * –¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ API –æ—Ç–∫–ª–∏–∫–æ–≤
 * 
 * –ó–∞–ø—É—Å–∫: node test-simplified-applications.js
 */

const API_BASE_URL = 'http://localhost:3000';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  candidateToken: 'candidate_jwt_token_here',
  hrToken: 'hr_jwt_token_here',
  jobId: 'test_job_id_here'
};

async function testSimplifiedApplications() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ API –æ—Ç–∫–ª–∏–∫–æ–≤\n');

  try {
    // 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞...');
    await testCreateApplication();
    
    // 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤...');
    await testGetApplications();
    
    // 3. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
    await testValidation();
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

async function testCreateApplication() {
  try {
    const response = await fetch(`${API_BASE_URL}/applications`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${testData.candidateToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        jobId: testData.jobId
        // –¢–æ–ª—å–∫–æ jobId - –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ!
      })
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ –û—Ç–∫–ª–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('üìÑ –†–µ–∑—é–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ:', result.resumeUrl ? '–î–∞' : '–ù–µ—Ç');
      console.log('üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç:', `${result.candidate.firstName} ${result.candidate.lastName}`);
      console.log('üè¢ –ö–æ–º–ø–∞–Ω–∏—è:', result.job.hr.company);
    } else {
      console.log('‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞:', result.message);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞:', error.message);
  }
}

async function testGetApplications() {
  try {
    const response = await fetch(`${API_BASE_URL}/applications/my`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${testData.candidateToken}`,
      }
    });

    const applications = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ –û—Ç–∫–ª–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤: ${applications.length}`);
      
      applications.forEach((app, index) => {
        console.log(`  ${index + 1}. ${app.job.title} - ${app.status}`);
      });
    } else {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤:', applications.message);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤:', error.message);
  }
}

async function testValidation() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
  
  // –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
  try {
    const response = await fetch(`${API_BASE_URL}/applications`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ jobId: testData.jobId })
    });
    
    if (response.status === 401) {
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      console.log('‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
  } catch (error) {
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏)');
  }
  
  // –¢–µ—Å—Ç –±–µ–∑ jobId
  try {
    const response = await fetch(`${API_BASE_URL}/applications`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${testData.candidateToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({})
    });
    
    const result = await response.json();
    
    if (response.status === 400) {
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è jobId —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      console.log('‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è jobId –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
  } catch (error) {
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è jobId —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏)');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async function testWithRealData() {
  console.log('\nüîß –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:');
  console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run start:dev');
  console.log('2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω');
  console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –∏ –ø–æ–ª—É—á–∏—Ç–µ jobId');
  console.log('4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
  console.log('5. –û–±–Ω–æ–≤–∏—Ç–µ testData –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ');
  console.log('6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-simplified-applications.js');
}

// –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Postman/Insomnia
const postmanExamples = {
  "create_application": {
    "method": "POST",
    "url": "{{base_url}}/applications",
    "headers": {
      "Authorization": "Bearer {{candidate_token}}",
      "Content-Type": "application/json"
    },
    "body": {
      "jobId": "{{job_id}}"
    }
  },
  "get_my_applications": {
    "method": "GET",
    "url": "{{base_url}}/applications/my",
    "headers": {
      "Authorization": "Bearer {{candidate_token}}"
    }
  },
  "upload_resume": {
    "method": "POST",
    "url": "{{base_url}}/profiles/candidate/resume",
    "headers": {
      "Authorization": "Bearer {{candidate_token}}"
    },
    "body": {
      "file": "{{resume_file}}"
    }
  }
};

console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è Postman/Insomnia:');
console.log(JSON.stringify(postmanExamples, null, 2));

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testSimplifiedApplications();
  testWithRealData();
}

module.exports = {
  testSimplifiedApplications,
  testCreateApplication,
  testGetApplications,
  testValidation
};
