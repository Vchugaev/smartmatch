// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugUserProfile() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –ø—Ä–æ—Ñ–∏–ª—è–º–∏
    const users = await prisma.user.findMany({
      include: {
        hrProfile: true,
        candidateProfile: true,
        universityProfile: true,
        adminProfile: true,
        moderatorProfile: true,
      },
      orderBy: { createdAt: 'desc' },
      take: 10
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);

    users.forEach((user, index) => {
      console.log(`${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);
      console.log(`   ID: ${user.id}`);
      console.log(`   –†–æ–ª—å: ${user.role}`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${user.isActive}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${user.createdAt}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
      const profiles = [];
      if (user.hrProfile) profiles.push(`HR (${user.hrProfile.id})`);
      if (user.candidateProfile) profiles.push(`CANDIDATE (${user.candidateProfile.id})`);
      if (user.universityProfile) profiles.push(`UNIVERSITY (${user.universityProfile.id})`);
      if (user.adminProfile) profiles.push(`ADMIN (${user.adminProfile.id})`);
      if (user.moderatorProfile) profiles.push(`MODERATOR (${user.moderatorProfile.id})`);
      
      console.log(`   –ü—Ä–æ—Ñ–∏–ª–∏: ${profiles.length > 0 ? profiles.join(', ') : '–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—è
      const expectedProfile = user.role.toLowerCase() + 'Profile';
      const hasCorrectProfile = user[expectedProfile] !== null;
      
      if (!hasCorrectProfile) {
        console.log(`   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –†–æ–ª—å ${user.role} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—é!`);
      } else {
        console.log(`   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ–ª–∏`);
      }
      
      console.log('');
    });

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é ADMIN
    const adminUsers = users.filter(user => user.role === 'ADMIN');
    console.log(`üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é ADMIN: ${adminUsers.length}`);
    
    adminUsers.forEach(admin => {
      console.log(`   - ${admin.email} (ID: ${admin.id})`);
      if (admin.adminProfile) {
        console.log(`     ‚úÖ Admin –ø—Ä–æ—Ñ–∏–ª—å: ${admin.adminProfile.id}`);
      } else {
        console.log(`     ‚ùå Admin –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!`);
      }
    });

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Ñ–∏–ª–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
    const usersWithUniversityProfile = users.filter(user => user.universityProfile);
    console.log(`\nüè´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞: ${usersWithUniversityProfile.length}`);
    
    usersWithUniversityProfile.forEach(user => {
      console.log(`   - ${user.email} (–†–æ–ª—å: ${user.role})`);
      if (user.role !== 'UNIVERSITY') {
        console.log(`     ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –†–æ–ª—å ${user.role} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—é —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞!`);
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

debugUserProfile();
