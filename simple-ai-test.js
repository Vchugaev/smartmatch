// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç AI –∞–≥–µ–Ω—Ç–∞
const axios = require('axios');

async function testOllamaDirect() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama...');
  
  try {
    const response = await axios.get('http://109.73.193.10:11434/api/tags');
    console.log('‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üìã –ú–æ–¥–µ–ª–∏:', response.data.models?.map(m => m.name) || []);
    return true;
  } catch (error) {
    console.log('‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return false;
  }
}

async function testOllamaGenerate() {
  console.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞...');
  
  try {
    const response = await axios.post('http://109.73.193.10:11434/api/generate', {
      model: 'llama2',
      prompt: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
      stream: false
    });
    
    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('ü§ñ –û—Ç–≤–µ—Ç:', response.data.response);
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

async function runTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç AI –∞–≥–µ–Ω—Ç–∞...\n');
  
  const ollamaOk = await testOllamaDirect();
  if (ollamaOk) {
    await testOllamaGenerate();
  }
  
  console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

runTest().catch(console.error);
