const axios = require('axios');

const BASE_URL = 'http://localhost:3000';
const OLLAMA_URL = 'http://109.73.193.10:11434';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testResume = `
–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
Email: ivan.petrov@email.com
–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67

–û–ü–´–¢ –†–ê–ë–û–¢–´:
2020-2023 - Senior Developer –≤ TechCorp
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ React –∏ Node.js
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ 5 —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API

2018-2020 - Middle Developer –≤ StartupXYZ
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
- –£—á–∞—Å—Ç–∏–µ –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö

–û–ë–†–ê–ó–û–í–ê–ù–ò–ï:
2014-2018 - –ú–ì–£, –§–∞–∫—É–ª—å—Ç–µ—Ç –í–ú–ö, –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å "–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"

–ù–ê–í–´–ö–ò:
JavaScript, TypeScript, React, Node.js, PostgreSQL, Git, Docker, AWS
`;

const testJobRequirements = {
  title: "Senior Full-Stack Developer",
  company: "InnovationTech",
  requirements: [
    "5+ –ª–µ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
    "–ó–Ω–∞–Ω–∏–µ JavaScript, TypeScript, React, Node.js",
    "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö",
    "–û–ø—ã—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π",
    "–ó–Ω–∞–Ω–∏–µ Docker –∏ –æ–±–ª–∞—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
  ],
  responsibilities: [
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
    "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"
  ]
};

async function testOllamaConnection() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama...');
  try {
    const response = await axios.get(`${OLLAMA_URL}/api/tags`);
    console.log('‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:', response.data.models?.map(m => m.name) || []);
    return true;
  } catch (error) {
    console.log('‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return false;
  }
}

async function testAiHealth() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —Å–µ—Ä–≤–∏—Å...');
  try {
    const response = await axios.get(`${BASE_URL}/ai/health`);
    console.log('‚úÖ AI —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üìä –°—Ç–∞—Ç—É—Å:', response.data);
    return true;
  } catch (error) {
    console.log('‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return false;
  }
}

async function testResumeAnalysis() {
  console.log('\nüìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ...');
  try {
    const response = await axios.post(`${BASE_URL}/ai/analyze-resume`, {
      resumeText: testResume
    });
    
    if (response.data.success) {
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ —É—Å–ø–µ—à–µ–Ω');
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(response.data.data, null, 2));
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', response.data.error);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.response?.data || error.message);
  }
}

async function testJobDescriptionGeneration() {
  console.log('\nüíº –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏...');
  try {
    const response = await axios.post(`${BASE_URL}/ai/generate-job-description`, {
      requirements: "–ù—É–∂–µ–Ω Senior Full-Stack Developer —Å –æ–ø—ã—Ç–æ–º React, Node.js, PostgreSQL. –û–ø—ã—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."
    });
    
    if (response.data.success) {
      console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–∞');
      console.log('üìù –û–ø–∏—Å–∞–Ω–∏–µ:', response.data.data.description);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', response.data.error);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.response?.data || error.message);
  }
}

async function testJobMatch() {
  console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è...');
  try {
    const candidateProfile = {
      name: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
      skills: ["JavaScript", "TypeScript", "React", "Node.js", "PostgreSQL"],
      experience: "5+ –ª–µ—Ç",
      leadership: true
    };
    
    const response = await axios.post(`${BASE_URL}/ai/analyze-job-match`, {
      candidateProfile,
      jobRequirements: testJobRequirements
    });
    
    if (response.data.success) {
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–µ–Ω');
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(response.data.data, null, 2));
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', response.data.error);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.response?.data || error.message);
  }
}

async function testChat() {
  console.log('\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç —Å AI...');
  try {
    const response = await axios.post(`${BASE_URL}/ai/chat`, {
      message: "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö."
    });
    
    if (response.data.success) {
      console.log('‚úÖ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('ü§ñ –û—Ç–≤–µ—Ç AI:', response.data.data.response);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞:', response.data.error);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.response?.data || error.message);
  }
}

async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã AI –∞–≥–µ–Ω—Ç–∞...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama
  const ollamaAvailable = await testOllamaConnection();
  if (!ollamaAvailable) {
    console.log('\n‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://109.73.193.10:11434');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —Å–µ—Ä–≤–∏—Å
  const aiAvailable = await testAiHealth();
  if (!aiAvailable) {
    console.log('\n‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:3000');
    return;
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  await testResumeAnalysis();
  await testJobDescriptionGeneration();
  await testJobMatch();
  await testChat();
  
  console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runAllTests().catch(console.error);
