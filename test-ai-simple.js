const axios = require('axios');

const BASE_URL = 'http://localhost:3000';
const OLLAMA_URL = 'http://109.73.193.10:11434';

async function testOllamaDirect() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama –Ω–∞–ø—Ä—è–º—É—é...');
  try {
    const response = await axios.get(`${OLLAMA_URL}/api/tags`);
    console.log('‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üìã –ú–æ–¥–µ–ª–∏:', response.data.models || []);
    return response.data.models && response.data.models.length > 0;
  } catch (error) {
    console.log('‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return false;
  }
}

async function testOllamaGenerate() {
  console.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Ollama...');
  try {
    const response = await axios.post(`${OLLAMA_URL}/api/generate`, {
      model: 'gemma3:latest',
      prompt: '–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ.',
      stream: false
    }, {
      timeout: 30000
    });
    
    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('ü§ñ –û—Ç–≤–µ—Ç:', response.data.response);
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

async function testAiHealth() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  try {
    const response = await axios.get(`${BASE_URL}/ai-test/health`);
    console.log('‚úÖ AI —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üìä –°—Ç–∞—Ç—É—Å:', response.data);
    return true;
  } catch (error) {
    console.log('‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return false;
  }
}

async function testAiChat() {
  console.log('\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å...');
  try {
    const response = await axios.post(`${BASE_URL}/ai-test/chat`, {
      message: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?'
    });
    
    console.log('‚úÖ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('ü§ñ –û—Ç–≤–µ—Ç AI:', response.data.data.response);
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞:', error.response?.data || error.message);
    return false;
  }
}

async function testResumeAnalysis() {
  console.log('\nüìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ...');
  
  const testResume = `
–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
Email: ivan@email.com
–¢–µ–ª–µ—Ñ–æ–Ω: +7 999 123-45-67

–û–ü–´–¢:
2020-2023 - Senior Developer –≤ TechCorp
- React, Node.js, PostgreSQL
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π

–ù–ê–í–´–ö–ò:
JavaScript, TypeScript, React, Node.js
`;

  try {
    const response = await axios.post(`${BASE_URL}/ai-test/analyze-resume`, {
      resumeText: testResume
    });
    
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(response.data.data, null, 2));
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.response?.data || error.message);
    return false;
  }
}

async function runTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç AI –∞–≥–µ–Ω—Ç–∞...\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
  const ollamaOk = await testOllamaDirect();
  if (!ollamaOk) {
    console.log('\n‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π');
    console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª—å: ollama pull llama2');
    return;
  }
  
  // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
  const generateOk = await testOllamaGenerate();
  if (!generateOk) {
    console.log('\n‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —Å–µ—Ä–≤–∏—Å
  const aiOk = await testAiHealth();
  if (!aiOk) {
    console.log('\n‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run start:dev');
    return;
  }
  
  // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
  await testAiChat();
  await testResumeAnalysis();
  
  console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

runTest().catch(console.error);
