/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã AI –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è HR
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ HR –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 * –≤—Å–µ—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
 */

const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:3000';
const HR_TOKEN = 'your_hr_token_here'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω HR

// ID –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID)
const JOB_ID = 'job_123456789';

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —Å –ø–æ–º–æ—â—å—é AI
 */
async function analyzeJobCandidates(jobId) {
  try {
    console.log(`üîç –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏: ${jobId}`);
    
    const response = await axios.post(`${BASE_URL}/hr-ai/analyze-job-candidates`, {
      jobId: jobId
    }, {
      headers: {
        'Authorization': `Bearer ${HR_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (response.data.success) {
      console.log('‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      return response.data.data;
    } else {
      throw new Error('–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è');
    }
    
  } catch (error) {
    if (error.response) {
      console.error('‚ùå –û—à–∏–±–∫–∞ API:', error.response.data.message || error.response.data);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
    }
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å–∞
 */
async function checkAiHealth() {
  try {
    console.log('üè• –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å–∞...');
    
    const response = await axios.get(`${BASE_URL}/hr-ai/health`, {
      headers: {
        'Authorization': `Bearer ${HR_TOKEN}`
      }
    });

    if (response.data.success) {
      console.log('‚úÖ AI —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω');
      return true;
    } else {
      console.log('‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI —Å–µ—Ä–≤–∏—Å–∞:', error.message);
    return false;
  }
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
function displayAnalysisResults(analysis) {
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ AI –ê–ù–ê–õ–ò–ó–ê');
  console.log('='.repeat(50));
  
  console.log(`üìã –í–∞–∫–∞–Ω—Å–∏—è ID: ${analysis.jobId}`);
  console.log(`üë• –í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: ${analysis.totalApplications}`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${analysis.processingTime}–º—Å`);
  console.log(`üìù –†–µ–∑—é–º–µ: ${analysis.analysisSummary}`);
  
  console.log('\nüèÜ –¢–û–ü –ö–ê–ù–î–ò–î–ê–¢–´:');
  console.log('-'.repeat(50));
  
  analysis.topCandidates.forEach((candidate, index) => {
    console.log(`\n${index + 1}. –ö–∞–Ω–¥–∏–¥–∞—Ç ${candidate.candidateId}`);
    console.log(`   üìä –û–±—â–∏–π –±–∞–ª–ª: ${candidate.overallScore}/10`);
    console.log(`   üéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: ${candidate.matchScore}%`);
    console.log(`   üìà –£—Ä–æ–≤–µ–Ω—å: ${candidate.fitLevel.toUpperCase()}`);
    
    if (candidate.strengths.length > 0) {
      console.log(`   ‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:`);
      candidate.strengths.forEach(strength => {
        console.log(`      ‚Ä¢ ${strength}`);
      });
    }
    
    if (candidate.weaknesses.length > 0) {
      console.log(`   ‚ö†Ô∏è –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:`);
      candidate.weaknesses.forEach(weakness => {
        console.log(`      ‚Ä¢ ${weakness}`);
      });
    }
    
    if (candidate.recommendations.length > 0) {
      console.log(`   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
      candidate.recommendations.forEach(rec => {
        console.log(`      ‚Ä¢ ${rec}`);
      });
    }
    
    console.log(`   ü§ñ AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${candidate.aiNotes}`);
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç CSV –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
 */
function createCsvReport(analysis) {
  const csvHeader = '–ö–∞–Ω–¥–∏–¥–∞—Ç,–û–±—â–∏–π –±–∞–ª–ª,–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ %,–£—Ä–æ–≤–µ–Ω—å,–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã,–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã,–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏,AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';
  
  const csvRows = analysis.topCandidates.map(candidate => {
    return [
      candidate.candidateId,
      candidate.overallScore,
      candidate.matchScore,
      candidate.fitLevel,
      `"${candidate.strengths.join('; ')}"`,
      `"${candidate.weaknesses.join('; ')}"`,
      `"${candidate.recommendations.join('; ')}"`,
      `"${candidate.aiNotes}"`
    ].join(',');
  });
  
  const csvContent = [csvHeader, ...csvRows].join('\n');
  
  console.log('\nüìÑ CSV –û–¢–ß–ï–¢:');
  console.log('-'.repeat(50));
  console.log(csvContent);
  
  return csvContent;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function main() {
  console.log('üöÄ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ AI –ê–ù–ê–õ–ò–ó–ê –ö–ê–ù–î–ò–î–ê–¢–û–í');
  console.log('='.repeat(50));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å–∞
    const isHealthy = await checkAiHealth();
    if (!isHealthy) {
      console.log('‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç.');
      return;
    }
    
    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    console.log('\nü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑...');
    const analysis = await analyzeJobCandidates(JOB_ID);
    
    // 3. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    displayAnalysisResults(analysis);
    
    // 4. –°–æ–∑–¥–∞–µ–º CSV –æ—Ç—á–µ—Ç
    const csvReport = createCsvReport(analysis);
    
    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const fs = require('fs');
    const filename = `ai-analysis-${JOB_ID}-${new Date().toISOString().split('T')[0]}.csv`;
    fs.writeFileSync(filename, csvReport);
    console.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${filename}`);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  analyzeJobCandidates,
  checkAiHealth,
  displayAnalysisResults,
  createCsvReport
};
