import { Injectable, NotFoundException, ConflictException, ForbiddenException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreateApplicationDto, UpdateApplicationDto, ApplicationQueryDto } from '../../dto/application.dto';
import { ApplicationStatus } from '@prisma/client';
import { APPLICATION_INCLUDE_FULL } from '../../shared/constants/prisma-fragments';

@Injectable()
export class ApplicationsService {
  constructor(private prisma: PrismaService) {}

  async create(createApplicationDto: CreateApplicationDto, userId: string) {
    const { jobId } = createApplicationDto;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è
    const job = await this.prisma.job.findUnique({
      where: { id: jobId },
      include: { hr: true },
    });

    if (!job) {
      throw new NotFoundException('–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ userId
    const candidateProfile = await this.prisma.candidateProfile.findUnique({
      where: { userId },
      include: {
        resumes: {
          where: { isDefault: true },
          take: 1
        },
      },
    });

    if (!candidateProfile) {
      throw new NotFoundException('–ü—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª–∏–∫–æ–º –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ
    const defaultResume = candidateProfile.resumes[0];
    if (!defaultResume) {
      throw new ConflictException('–î–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é
    const existingApplication = await this.prisma.application.findUnique({
      where: {
        jobId_candidateId: {
          jobId,
          candidateId: candidateProfile.id,
        },
      },
    });

    if (existingApplication) {
      throw new ConflictException('–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é');
    }

    const application = await this.prisma.application.create({
      data: {
        jobId,
        candidateId: candidateProfile.id,
        hrId: job.hrId,
        resumeId: defaultResume.id, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ
      },
    });

    return this.findOne(application.id);
  }

  async findAll(query: ApplicationQueryDto) {
    const { status, jobId, candidateId } = query;

    const where: any = {};
    if (status) where.status = status;
    if (jobId) where.jobId = jobId;
    if (candidateId) where.candidateId = candidateId;

    return this.prisma.application.findMany({
      where,
      include: {
        job: {
          select: {
            id: true,
            title: true,
            location: true,
            type: true,
            hr: {
              select: {
                company: true,
              },
            },
          },
        },
        candidate: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            phone: true,
            user: {
              select: {
                email: true,
              },
            },
          },
        },
        hr: {
          select: {
            firstName: true,
            lastName: true,
            company: true,
          },
        },
      },
      orderBy: { appliedAt: 'desc' },
    });
  }

  async findOne(id: string) {
    const application = await this.prisma.application.findUnique({
      where: { id },
      include: APPLICATION_INCLUDE_FULL,
    });

    if (!application) {
      throw new NotFoundException('Application not found');
    }

    return application;
  }

  async update(id: string, updateApplicationDto: UpdateApplicationDto, userId: string) {
    console.log(`üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ ${id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    
    const application = await this.findOne(id);
    console.log(`üìã –û—Ç–∫–ª–∏–∫ –Ω–∞–π–¥–µ–Ω: HR ID = ${application.hrId}`);

    // –ü–æ–ª—É—á–∞–µ–º HR –ø—Ä–æ—Ñ–∏–ª—å –ø–æ userId
    const hrProfile = await this.prisma.hRProfile.findUnique({
      where: { userId },
      select: { id: true, company: true, firstName: true, lastName: true }
    });

    if (!hrProfile) {
      console.log(`‚ùå HR –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è userId: ${userId}`);
      throw new ForbiddenException('HR –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω HR –ø—Ä–æ—Ñ–∏–ª—å: ${hrProfile.id} (${hrProfile.firstName} ${hrProfile.lastName})`);

    if (application.hrId !== hrProfile.id) {
      console.log(`‚ùå –û—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç HR ID: ${application.hrId}, –∞ —Ç–µ–∫—É—â–∏–π HR ID: ${hrProfile.id}`);
      throw new ForbiddenException('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞');
    }

    console.log(`‚úÖ –ü—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∫–ª–∏–∫`);

    const updatedApplication = await this.prisma.application.update({
      where: { id },
      data: {
        status: updateApplicationDto.status as any,
        notes: updateApplicationDto.notes,
      },
    });

    console.log(`‚úÖ –û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
    return this.findOne(id);
  }

  async remove(id: string, userId: string) {
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ ${id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    
    const application = await this.findOne(id);
    console.log(`üìã –û—Ç–∫–ª–∏–∫ –Ω–∞–π–¥–µ–Ω: HR ID = ${application.hrId}, Candidate ID = ${application.candidateId}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      select: { role: true }
    });

    if (!user) {
      throw new ForbiddenException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    let hasPermission = false;

    if (user.role === 'HR') {
      // –î–ª—è HR - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫–ª–∏–∫ –Ω–∞ –µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏—é
      const hrProfile = await this.prisma.hRProfile.findUnique({
        where: { userId },
        select: { id: true }
      });

      if (hrProfile && application.hrId === hrProfile.id) {
        hasPermission = true;
        console.log(`‚úÖ HR –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞`);
      }
    } else if (user.role === 'CANDIDATE') {
      // –î–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –µ–≥–æ –æ—Ç–∫–ª–∏–∫
      const candidateProfile = await this.prisma.candidateProfile.findUnique({
        where: { userId },
        select: { id: true }
      });

      if (candidateProfile && application.candidateId === candidateProfile.id) {
        hasPermission = true;
        console.log(`‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞`);
      }
    }

    if (!hasPermission) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞`);
      throw new ForbiddenException('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞');
    }

    await this.prisma.application.delete({
      where: { id },
    });

    console.log(`‚úÖ –û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
    return { message: '–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' };
  }

  async findByCandidate(userId: string) {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ userId
    const candidateProfile = await this.prisma.candidateProfile.findUnique({
      where: { userId },
    });

    if (!candidateProfile) {
      throw new NotFoundException('–ü—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return this.prisma.application.findMany({
      where: { candidateId: candidateProfile.id },
      include: {
        job: {
          select: {
            id: true,
            title: true,
            location: true,
            type: true,
            status: true,
            hr: {
              select: {
                company: true,
              },
            },
          },
        },
      },
      orderBy: { appliedAt: 'desc' },
    });
  }

  async findByHR(userId: string) {
    console.log(`üîç –ü–æ–∏—Å–∫ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è HR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º HR –ø—Ä–æ—Ñ–∏–ª—å –ø–æ userId
    const hrProfile = await this.prisma.hRProfile.findUnique({
      where: { userId },
      select: { id: true, company: true, firstName: true, lastName: true }
    });

    if (!hrProfile) {
      console.log(`‚ùå HR –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è userId: ${userId}`);
      throw new NotFoundException('HR –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω HR –ø—Ä–æ—Ñ–∏–ª—å: ${hrProfile.id} (${hrProfile.firstName} ${hrProfile.lastName}) –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: ${hrProfile.company}`);

    const applications = await this.prisma.application.findMany({
      where: { hrId: hrProfile.id },
      include: {
        job: {
          select: {
            id: true,
            title: true,
            location: true,
            type: true,
            status: true,
            hr: {
              select: {
                company: true,
              },
            },
          },
        },
        candidate: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            phone: true,
            user: {
              select: {
                email: true,
              },
            },
          },
        },
        resume: {
          select: {
            id: true,
            title: true,
            summary: true,
            isDefault: true,
          },
        },
      },
      orderBy: { appliedAt: 'desc' },
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è HR: ${applications.length}`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    const allApplications = await this.prisma.application.findMany({
      select: { 
        id: true, 
        hrId: true, 
        status: true,
        appliedAt: true,
        job: { 
          select: { 
            id: true,
            title: true,
            hrId: true 
          } 
        },
        hr: { 
          select: { 
            id: true,
            company: true,
            firstName: true,
            lastName: true 
          } 
        },
        candidate: {
          select: {
            firstName: true,
            lastName: true
          }
        }
      }
    });
    
    console.log('üìã –í—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:');
    allApplications.forEach(app => {
      console.log(`  - ID: ${app.id}, HR: ${app.hr.company} (${app.hr.firstName} ${app.hr.lastName}), HR ID: ${app.hrId}, –°—Ç–∞—Ç—É—Å: ${app.status}, –ö–∞–Ω–¥–∏–¥–∞—Ç: ${app.candidate.firstName} ${app.candidate.lastName}, –í–∞–∫–∞–Ω—Å–∏—è: ${app.job.title}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫–ª–∏–∫–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ HR
    const hrApplications = allApplications.filter(app => app.hrId === hrProfile.id);
    console.log(`üéØ –û—Ç–∫–ª–∏–∫–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ HR (${hrProfile.id}): ${hrApplications.length}`);
    
    return applications;
  }

  async debugMyApplications(userId: string, userRole: string) {
    console.log(`üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}, —Ä–æ–ª—å: ${userRole}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      select: { id: true, email: true, role: true }
    });

    let profile: any = null;
    let applications: any[] = [];

    if (userRole === 'HR') {
      // –ü–æ–ª—É—á–∞–µ–º HR –ø—Ä–æ—Ñ–∏–ª—å
      profile = await this.prisma.hRProfile.findUnique({
        where: { userId },
        select: { id: true, company: true, firstName: true, lastName: true }
      });

      if (profile) {
        applications = await this.prisma.application.findMany({
          where: { hrId: profile.id },
          select: { 
            id: true, 
            status: true, 
            appliedAt: true,
            job: { select: { title: true } },
            candidate: { select: { firstName: true, lastName: true } }
          }
        });
      }
    } else if (userRole === 'CANDIDATE') {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
      profile = await this.prisma.candidateProfile.findUnique({
        where: { userId },
        select: { id: true, firstName: true, lastName: true }
      });

      if (profile) {
        applications = await this.prisma.application.findMany({
          where: { candidateId: profile.id },
          select: { 
            id: true, 
            status: true, 
            appliedAt: true,
            job: { select: { title: true } }
          }
        });
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const allApplications = await this.prisma.application.findMany({
      select: { 
        id: true, 
        hrId: true, 
        candidateId: true,
        status: true,
        appliedAt: true,
        job: { 
          select: { 
            id: true,
            title: true,
            hrId: true 
          } 
        },
        hr: { 
          select: { 
            id: true,
            company: true,
            firstName: true,
            lastName: true,
            userId: true
          } 
        },
        candidate: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            userId: true
          }
        }
      }
    });

    return {
      user,
      profile,
      applications,
      allApplications,
      totalApplications: allApplications.length,
      myApplicationsCount: applications.length,
      userRole
    };
  }

  async debugPermissions(applicationId: string, userId: string, userRole: string) {
    console.log(`üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ ${applicationId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}, —Ä–æ–ª—å: ${userRole}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      select: { id: true, email: true, role: true }
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫
    const application = await this.prisma.application.findUnique({
      where: { id: applicationId },
      include: {
        job: {
          select: {
            id: true,
            title: true,
            hrId: true
          }
        },
        hr: {
          select: {
            id: true,
            company: true,
            firstName: true,
            lastName: true,
            userId: true
          }
        },
        candidate: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            userId: true
          }
        }
      }
    });

    if (!application) {
      return {
        error: '–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        user,
        application: null
      };
    }

    let profile: any = null;
    let hasUpdatePermission = false;
    let hasDeletePermission = false;

    if (userRole === 'HR') {
      // –ü–æ–ª—É—á–∞–µ–º HR –ø—Ä–æ—Ñ–∏–ª—å
      profile = await this.prisma.hRProfile.findUnique({
        where: { userId },
        select: { id: true, company: true, firstName: true, lastName: true }
      });

      if (profile && application.hrId === profile.id) {
        hasUpdatePermission = true;
        hasDeletePermission = true;
      }
    } else if (userRole === 'CANDIDATE') {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
      profile = await this.prisma.candidateProfile.findUnique({
        where: { userId },
        select: { id: true, firstName: true, lastName: true }
      });

      if (profile && application.candidateId === profile.id) {
        hasDeletePermission = true; // –ö–∞–Ω–¥–∏–¥–∞—Ç –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –æ—Ç–∫–ª–∏–∫
        // –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞
      }
    }

    return {
      user,
      profile,
      application,
      permissions: {
        canUpdate: hasUpdatePermission,
        canDelete: hasDeletePermission
      },
      analysis: {
        userRole,
        applicationHrId: application.hrId,
        applicationCandidateId: application.candidateId,
        profileId: profile?.id,
        hrMatch: profile && application.hrId === profile.id,
        candidateMatch: profile && application.candidateId === profile.id
      }
    };
  }
}
