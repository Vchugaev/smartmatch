import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { OllamaService } from './ollama.service';

export interface CandidateAnalysisResult {
  candidateId: string;
  applicationId: string;
  overallScore: number;
  strengths: string[];
  weaknesses: string[];
  recommendations: string[];
  matchScore: number;
  fitLevel: 'low' | 'medium' | 'high';
  aiNotes: string;
}

export interface JobAnalysisResult {
  jobId: string;
  totalApplications: number;
  topCandidates: CandidateAnalysisResult[];
  analysisSummary: string;
  processingTime: number;
}

@Injectable()
export class CandidateAnalysisService {
  private readonly logger = new Logger(CandidateAnalysisService.name);

  constructor(
    private readonly prisma: PrismaService,
    private readonly ollamaService: OllamaService,
  ) {}

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç HR –ø—Ä–æ—Ñ–∏–ª—å –ø–æ userId
   */
  async getHrProfile(userId: string): Promise<any> {
    console.log(`üîç –ü–æ–∏—Å–∫ HR –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    const hrProfile = await this.prisma.hRProfile.findUnique({
      where: { userId },
      select: { id: true, company: true, firstName: true, lastName: true }
    });

    if (!hrProfile) {
      console.log(`‚ùå HR –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è userId: ${userId}`);
      
      // –ü–æ–∫–∞–∂–µ–º –≤—Å–µ HR –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const allHrProfiles = await this.prisma.hRProfile.findMany({
        select: { id: true, userId: true, company: true, firstName: true, lastName: true }
      });
      console.log('üìã –í—Å–µ HR –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:', allHrProfiles);
      
      // –ü–æ–∫–∞–∂–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const user = await this.prisma.user.findUnique({
        where: { id: userId },
        select: { id: true, email: true, role: true }
      });
      console.log('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', user);
      
      return null;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω HR –ø—Ä–æ—Ñ–∏–ª—å: ${hrProfile.id} (${hrProfile.firstName} ${hrProfile.lastName}) –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: ${hrProfile.company}`);
    return hrProfile;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
   */
  async analyzeJobCandidates(jobId: string, hrId: string): Promise<JobAnalysisResult> {
    const startTime = Date.now();
    
    try {
      this.logger.log(`Starting analysis for job ${jobId} by HR ${hrId}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
      const job = await this.prisma.job.findFirst({
        where: { 
          id: jobId,
          hrId: hrId 
        },
        include: {
          skills: {
            include: {
              skill: true
            }
          }
        }
      });

      if (!job) {
        throw new Error('Job not found or access denied');
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
      const applications = await this.prisma.application.findMany({
        where: { 
          jobId: jobId,
          hrId: hrId 
        },
        include: {
          candidate: {
            include: {
              skills: {
                include: {
                  skill: true
                }
              },
              experiences: true,
              educations: true,
              resumes: {
                where: { isDefault: true },
                take: 1
              }
            }
          },
          resume: true
        }
      });

      this.logger.log(`Found ${applications.length} applications for analysis`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
      const candidateAnalyses: CandidateAnalysisResult[] = [];
      
      for (const application of applications) {
        try {
          const analysis = await this.analyzeSingleCandidate(application, job);
          candidateAnalyses.push(analysis);
        } catch (error) {
          this.logger.error(`Failed to analyze candidate ${application.candidateId}:`, error.message);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –æ–±—â–µ–º—É –±–∞–ª–ª—É
      candidateAnalyses.sort((a, b) => b.overallScore - a.overallScore);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–µ–µ —Ä–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞
      const analysisSummary = await this.generateAnalysisSummary(candidateAnalyses, job);

      const processingTime = Date.now() - startTime;

      return {
        jobId,
        totalApplications: applications.length,
        topCandidates: candidateAnalyses.slice(0, 10), // –¢–æ–ø 10 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        analysisSummary,
        processingTime
      };

    } catch (error) {
      this.logger.error('Job candidates analysis failed:', error.message);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   */
  private async analyzeSingleCandidate(application: any, job: any): Promise<CandidateAnalysisResult> {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI
    const candidateData = this.prepareCandidateData(application);
    const jobData = this.prepareJobData(job);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const prompt = this.createAnalysisPrompt(candidateData, jobData);

    try {
      const response = await this.ollamaService.generateText({
        model: 'gemma3:latest',
        prompt,
        options: {
          temperature: 0.2,
          max_tokens: 1500,
        },
      });

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI
      const analysis = this.parseAnalysisResponse(response.response);

      return {
        candidateId: application.candidateId,
        applicationId: application.id,
        overallScore: analysis.overallScore || 0,
        strengths: analysis.strengths || [],
        weaknesses: analysis.weaknesses || [],
        recommendations: analysis.recommendations || [],
        matchScore: analysis.matchScore || 0,
        fitLevel: analysis.fitLevel || 'low',
        aiNotes: analysis.aiNotes || '–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è'
      };

    } catch (error) {
      this.logger.error(`AI analysis failed for candidate ${application.candidateId}:`, error.message);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return {
        candidateId: application.candidateId,
        applicationId: application.id,
        overallScore: 5,
        strengths: ['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'],
        weaknesses: ['–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
        recommendations: ['–ü—Ä–æ–≤–µ—Å—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ'],
        matchScore: 50,
        fitLevel: 'medium',
        aiNotes: '–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞'
      };
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è AI
   */
  private prepareCandidateData(application: any): any {
    const candidate = application.candidate;
    const resume = application.resume || candidate.resumes?.[0];

    return {
      // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      name: `${candidate.firstName} ${candidate.lastName}`,
      location: candidate.location,
      bio: candidate.bio,
      
      // –ù–∞–≤—ã–∫–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —É—Ä–æ–≤–Ω–∏)
      skills: candidate.skills?.map(cs => ({
        name: cs.skill.name,
        level: cs.level
      })) || [],
      
      // –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (—Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
      experience: candidate.experiences?.map(exp => ({
        company: exp.company,
        position: exp.position,
        duration: this.calculateDuration(exp.startDate, exp.endDate),
        description: exp.description?.substring(0, 200) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
      })) || [],
      
      // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
      education: candidate.educations?.map(edu => ({
        institution: edu.institution,
        degree: edu.degree,
        field: edu.field,
        year: edu.endDate ? new Date(edu.endDate).getFullYear() : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
      })) || [],
      
      // –†–µ–∑—é–º–µ (—Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)
      resumeSummary: resume?.summary?.substring(0, 300) || '–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
      
      // –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
      coverLetter: application.coverLetter?.substring(0, 500) || '–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    };
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è AI
   */
  private prepareJobData(job: any): any {
    return {
      title: job.title,
      description: job.description?.substring(0, 500), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
      requirements: job.requirements?.substring(0, 500),
      responsibilities: job.responsibilities?.substring(0, 500),
      location: job.location,
      type: job.type,
      experienceLevel: job.experienceLevel,
      salaryMin: job.salaryMin,
      salaryMax: job.salaryMax,
      requiredSkills: job.skills?.map(js => ({
        name: js.skill.name,
        required: js.required,
        level: js.level
      })) || []
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   */
  private createAnalysisPrompt(candidateData: any, jobData: any): string {
    return `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –≤–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –±–µ–∑ markdown –±–ª–æ–∫–æ–≤:

–ö–ê–ù–î–ò–î–ê–¢:
${JSON.stringify(candidateData, null, 2)}

–í–ê–ö–ê–ù–°–ò–Ø:
${JSON.stringify(jobData, null, 2)}

–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
{
  "overallScore": —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (–æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞),
  "matchScore": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏),
  "fitLevel": "low" | "medium" | "high" (—É—Ä–æ–≤–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è),
  "strengths": ["—Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"],
  "weaknesses": ["—Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã"],
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è HR"],
  "aiNotes": "–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π AI –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ"
}

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏
- –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
- –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
- –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
- –û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
`;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç AI
   */
  private parseAnalysisResponse(response: string): any {
    try {
      // –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      let jsonText = response.trim();
      if (jsonText.startsWith('```json')) {
        jsonText = jsonText.replace(/^```json\s*/, '').replace(/\s*```$/, '');
      } else if (jsonText.startsWith('```')) {
        jsonText = jsonText.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }
      
      return JSON.parse(jsonText);
    } catch (error) {
      this.logger.error('Failed to parse AI response:', error.message);
      this.logger.error('Raw response:', response);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      return {
        overallScore: 5,
        matchScore: 50,
        fitLevel: 'medium',
        strengths: ['–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞'],
        weaknesses: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'],
        recommendations: ['–ü—Ä–æ–≤–µ—Å—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ'],
        aiNotes: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AI'
      };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–µ–µ —Ä–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞
   */
  private async generateAnalysisSummary(analyses: CandidateAnalysisResult[], job: any): Promise<string> {
    try {
      const topCandidates = analyses.slice(0, 3);
      const summaryData = {
        totalCandidates: analyses.length,
        topCandidates: topCandidates.map(c => ({
          name: c.candidateId,
          score: c.overallScore,
          fitLevel: c.fitLevel
        })),
        jobTitle: job.title
      };

      const prompt = `
–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è HR:

–î–ê–ù–ù–´–ï:
${JSON.stringify(summaryData, null, 2)}

–í–µ—Ä–Ω–∏ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
`;

      const response = await this.ollamaService.generateText({
        model: 'gemma3:latest',
        prompt,
        options: {
          temperature: 0.3,
          max_tokens: 300,
        },
      });

      return response.response;
    } catch (error) {
      this.logger.error('Failed to generate analysis summary:', error.message);
      return `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${analyses.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å —Ç–æ–ø-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏.`;
    }
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
   */
  private calculateDuration(startDate: Date, endDate?: Date): string {
    const start = new Date(startDate);
    const end = endDate ? new Date(endDate) : new Date();
    
    const diffTime = Math.abs(end.getTime() - start.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    const years = Math.floor(diffDays / 365);
    const months = Math.floor((diffDays % 365) / 30);
    
    if (years > 0) {
      return `${years} –≥. ${months} –º–µ—Å.`;
    } else {
      return `${months} –º–µ—Å.`;
    }
  }
}
