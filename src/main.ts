import { NestFactory } from '@nestjs/core';
import { ValidationPipe, HttpException, HttpStatus } from '@nestjs/common';
import { AppModule } from './app.module';
import { GlobalExceptionFilter } from './filters/global-exception.filter';
import helmet from 'helmet';
import compression from 'compression';
import cookieParser from 'cookie-parser';
import * as express from 'express';

async function bootstrap() {
  const app = await NestFactory.create(AppModule, {
    bodyParser: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π body parser –¥–ª—è multipart –¥–∞–Ω–Ω—ã—Ö
  });
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  app.use(helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        scriptSrc: ["'self'"],
        imgSrc: ["'self'", "data:", "https:"],
      },
    },
    crossOriginEmbedderPolicy: false,
  }));
  
  app.use(compression());
  
  // Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
  app.use((req, res, next) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type –¥–ª—è multipart –¥–∞–Ω–Ω—ã—Ö
    if (req.headers['content-type']?.includes('multipart/form-data')) {
      // –î–ª—è multipart –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º JSON parser
      req.setTimeout(300000); // 5 –º–∏–Ω—É—Ç
      res.setTimeout(300000); // 5 –º–∏–Ω—É—Ç
      next();
    } else if (req.url.includes('/profiles/avatar/upload') || req.url.includes('/storage/upload')) {
      // –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º JSON parser
      req.setTimeout(300000); // 5 –º–∏–Ω—É—Ç
      res.setTimeout(300000); // 5 –º–∏–Ω—É—Ç
      next();
    } else {
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ–º JSON parser
      express.json({ limit: '50mb' })(req, res, next);
    }
  });
  
  // Cookie parser
  app.use(cookieParser());
  
  
  // CORS - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
  app.enableCors({
    origin: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD'],
    allowedHeaders: [
      'Content-Type', 
      'Authorization', 
      'X-Requested-With', 
      'Accept', 
      'Origin', 
      'Cookie',
      'X-CSRF-Token',
      'X-API-Key',
      'Access-Control-Allow-Origin',
      'Access-Control-Allow-Headers',
      'Access-Control-Allow-Methods'
    ],
    exposedHeaders: ['Set-Cookie', 'X-Total-Count'],
    optionsSuccessStatus: 200, // –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    preflightContinue: false, // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã
  });

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
  app.use((req, res, next) => {
    if (req.method === 'OPTIONS') {
      res.header('Access-Control-Allow-Origin', '*');
      res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD');
      res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin, Cookie, X-CSRF-Token, X-API-Key');
      res.header('Access-Control-Allow-Credentials', 'true');
      res.status(200).end();
      return;
    }
    next();
  });
  
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏–π
  app.useGlobalFilters(new GlobalExceptionFilter());

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  app.useGlobalPipes(new ValidationPipe({
    whitelist: true,
    forbidNonWhitelisted: true,
    transform: true,
    disableErrorMessages: false, // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    exceptionFactory: (errors) => {
      const result = errors.map((error) => ({
        property: error.property,
        value: error.value,
        constraints: error.constraints,
      }));
      return new HttpException(
        {
          message: 'Validation failed',
          details: result,
        },
        HttpStatus.BAD_REQUEST,
      );
    },
  }));
  
  await app.listen(process.env.PORT ?? 3000);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  process.on('SIGINT', async () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    await app.close();
    process.exit(0);
  });

  process.on('SIGTERM', async () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    await app.close();
    process.exit(0);
  });
}
bootstrap();
