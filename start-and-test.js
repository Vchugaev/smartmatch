const { spawn } = require('child_process');
const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function waitForServer() {
  console.log('‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  for (let i = 0; i < 30; i++) {
    try {
      await axios.get(`${BASE_URL}/ai-test/health`);
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!');
      return true;
    } catch (error) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  
  console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥');
  return false;
}

async function testAiAgent() {
  console.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∞–≥–µ–Ω—Ç...');
  
  try {
    // –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è
    const health = await axios.get(`${BASE_URL}/ai-test/health`);
    console.log('‚úÖ AI —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üìä –ú–æ–¥–µ–ª–∏:', health.data.models);
    
    // –¢–µ—Å—Ç —á–∞—Ç–∞
    const chat = await axios.post(`${BASE_URL}/ai-test/chat`, {
      message: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?'
    });
    console.log('‚úÖ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('ü§ñ –û—Ç–≤–µ—Ç:', chat.data.data.response);
    
    // –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ
    const resume = await axios.post(`${BASE_URL}/ai-test/analyze-resume`, {
      resumeText: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\nEmail: ivan@email.com\n–ù–∞–≤—ã–∫–∏: JavaScript, React'
    });
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(resume.data.data, null, 2));
    
    console.log('\nüéâ AI –∞–≥–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return false;
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º AI –∞–≥–µ–Ω—Ç...\n');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  console.log('üì± –ó–∞–ø—É—Å–∫–∞–µ–º NestJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
  const app = spawn('npm', ['run', 'start:dev'], {
    stdio: 'pipe',
    shell: true
  });
  
  app.stdout.on('data', (data) => {
    const output = data.toString();
    if (output.includes('Application is running on')) {
      console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
    }
  });
  
  app.stderr.on('data', (data) => {
    console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞:', data.toString());
  });
  
  // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
  const serverReady = await waitForServer();
  if (!serverReady) {
    app.kill();
    return;
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∞–≥–µ–Ω—Ç
  const testPassed = await testAiAgent();
  
  if (testPassed) {
    console.log('\nüéØ AI –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    console.log('\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:');
    console.log('GET  /ai-test/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è');
    console.log('POST /ai-test/chat - –ß–∞—Ç —Å AI');
    console.log('POST /ai-test/analyze-resume - –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ');
    console.log('GET  /ai-test/models - –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π');
  }
  
  // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
  console.log('\nüîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å...');
  console.log('üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
}

main().catch(console.error);
