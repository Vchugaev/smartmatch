/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

const http = require('http');

const BASE_URL = 'http://localhost:3000';

function makeRequest(method, path, headers = {}, body = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (body) {
      req.write(JSON.stringify(body));
    }
    req.end();
  });
}

async function testApplicationStatus() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞...\n');

    // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    console.log('1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...');
    const candidateResponse = await makeRequest('POST', '/auth/register', {}, {
      email: 'test-candidate@example.com',
      password: 'password123',
      role: 'CANDIDATE',
      firstName: '–¢–µ—Å—Ç',
      lastName: '–ö–∞–Ω–¥–∏–¥–∞—Ç'
    });
    
    if (candidateResponse.status !== 201) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', candidateResponse.data);
      return;
    }
    
    const candidateToken = candidateResponse.data.access_token;
    console.log('‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', candidateResponse.data.user.email);

    // 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è HR
    console.log('\n2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è HR...');
    const hrResponse = await makeRequest('POST', '/auth/register', {}, {
      email: 'test-hr@example.com',
      password: 'password123',
      role: 'HR',
      firstName: 'HR',
      lastName: '–ú–µ–Ω–µ–¥–∂–µ—Ä'
    });
    
    if (hrResponse.status !== 201) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ HR:', hrResponse.data);
      return;
    }
    
    const hrToken = hrResponse.data.access_token;
    console.log('‚úÖ HR –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', hrResponse.data.user.email);

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏...');
    const jobResponse = await makeRequest('POST', '/jobs', {
      'Authorization': `Bearer ${hrToken}`
    }, {
      title: 'Test Developer',
      description: '–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è',
      location: '–ú–æ—Å–∫–≤–∞',
      type: 'FULL_TIME',
      experienceLevel: 'JUNIOR'
    });
    
    if (jobResponse.status !== 201) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏:', jobResponse.data);
      return;
    }
    
    const jobId = jobResponse.data.id;
    console.log('‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', jobResponse.data.title, 'ID:', jobId);

    // 4. –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –ë–ï–ó –æ—Ç–∫–ª–∏–∫–∞ (—Å —Ç–æ–∫–µ–Ω–æ–º)
    console.log('\n4. –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –ë–ï–ó –æ—Ç–∫–ª–∏–∫–∞ (—Å —Ç–æ–∫–µ–Ω–æ–º)...');
    const jobDetailsBefore = await makeRequest('GET', `/jobs/${jobId}`, {
      'Authorization': `Bearer ${candidateToken}`
    });
    
    if (jobDetailsBefore.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', jobDetailsBefore.data);
      return;
    }
    
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ë–ï–ó –æ—Ç–∫–ª–∏–∫–∞:');
    console.log('   - hasApplied:', jobDetailsBefore.data.hasApplied);
    console.log('   - applicationStatus:', jobDetailsBefore.data.applicationStatus);
    console.log('   - applicationId:', jobDetailsBefore.data.applicationId);

    // 5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞
    console.log('\n5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞...');
    const applicationResponse = await makeRequest('POST', '/applications', {
      'Authorization': `Bearer ${candidateToken}`
    }, {
      jobId: jobId,
      coverLetter: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫'
    });
    
    if (applicationResponse.status !== 201) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞:', applicationResponse.data);
      return;
    }
    
    console.log('‚úÖ –û—Ç–∫–ª–∏–∫ —Å–æ–∑–¥–∞–Ω:', applicationResponse.data.id);

    // 6. –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –ü–û–°–õ–ï –æ—Ç–∫–ª–∏–∫–∞ (—Å —Ç–æ–∫–µ–Ω–æ–º)
    console.log('\n6. –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –ü–û–°–õ–ï –æ—Ç–∫–ª–∏–∫–∞ (—Å —Ç–æ–∫–µ–Ω–æ–º)...');
    const jobDetailsAfter = await makeRequest('GET', `/jobs/${jobId}`, {
      'Authorization': `Bearer ${candidateToken}`
    });
    
    if (jobDetailsAfter.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', jobDetailsAfter.data);
      return;
    }
    
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ü–û–°–õ–ï –æ—Ç–∫–ª–∏–∫–∞:');
    console.log('   - hasApplied:', jobDetailsAfter.data.hasApplied);
    console.log('   - applicationStatus:', jobDetailsAfter.data.applicationStatus);
    console.log('   - applicationId:', jobDetailsAfter.data.applicationId);
    console.log('   - appliedAt:', jobDetailsAfter.data.appliedAt);

    // 7. –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –ë–ï–ó —Ç–æ–∫–µ–Ω–∞
    console.log('\n7. –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –ë–ï–ó —Ç–æ–∫–µ–Ω–∞...');
    const jobDetailsAnonymous = await makeRequest('GET', `/jobs/${jobId}`);
    
    if (jobDetailsAnonymous.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', jobDetailsAnonymous.data);
      return;
    }
    
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ë–ï–ó —Ç–æ–∫–µ–Ω–∞:');
    console.log('   - hasApplied:', jobDetailsAnonymous.data.hasApplied);
    console.log('   - applicationStatus:', jobDetailsAnonymous.data.applicationStatus);

    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
    if (jobDetailsAfter.data.hasApplied) {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞: hasApplied = false, —Ö–æ—Ç—è –æ—Ç–∫–ª–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testApplicationStatus();
}

module.exports = { testApplicationStatus };
