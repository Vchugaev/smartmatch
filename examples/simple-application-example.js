/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ API –æ—Ç–∫–ª–∏–∫–æ–≤
 * 
 * –¢–µ–ø–µ—Ä—å –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ:
 * 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å (–æ–¥–∏–Ω —Ä–∞–∑)
 * 2. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" (—Ç–æ–ª—å–∫–æ jobId)
 */

const API_BASE_URL = 'http://localhost:3000';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
async function applyToJob(jobId, token) {
  try {
    const response = await fetch(`${API_BASE_URL}/applications`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        jobId: jobId
        // –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–ª–µ–π –Ω–µ –Ω—É–∂–Ω–æ!
      })
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ');
    }

    const application = await response.json();
    console.log('‚úÖ –û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', application);
    return application;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å (–¥–µ–ª–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
async function uploadResumeToProfile(file, token) {
  try {
    const formData = new FormData();
    formData.append('file', file);

    const response = await fetch(`${API_BASE_URL}/profiles/candidate/resume`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
      },
      body: formData
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ');
    }

    const result = await response.json();
    console.log('‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å!', result);
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤
async function getMyApplications(token) {
  try {
    const response = await fetch(`${API_BASE_URL}/applications/my`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
      }
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤');
    }

    const applications = await response.json();
    console.log('üìã –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏:', applications);
    return applications;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤:', error.message);
    throw error;
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function example() {
  const token = 'your_jwt_token_here';
  const jobId = 'job_id_here';

  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—é–º–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å (–¥–µ–ª–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
    const resumeFile = document.getElementById('resumeFile').files[0]; // HTML input file
    await uploadResumeToProfile(resumeFile, token);

    // 2. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º
    await applyToJob(jobId, token);

    // 3. –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –Ω–∞—à–∏ –æ—Ç–∫–ª–∏–∫–∏
    await getMyApplications(token);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
  }
}

// HTML –ø—Ä–∏–º–µ—Ä –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
const htmlExample = `
<!DOCTYPE html>
<html>
<head>
    <title>–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏</title>
</head>
<body>
    <h1>–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é</h1>
    
    <!-- –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ (–¥–µ–ª–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑) -->
    <div>
        <h3>1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å</h3>
        <input type="file" id="resumeFile" accept=".pdf,.doc,.docx">
        <button onclick="uploadResume()">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ</button>
    </div>
    
    <!-- –û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é (–ø—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞) -->
    <div>
        <h3>2. –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é</h3>
        <input type="text" id="jobId" placeholder="ID –≤–∞–∫–∞–Ω—Å–∏–∏">
        <button onclick="applyToJob()">–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è</button>
    </div>
    
    <!-- –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏ -->
    <div>
        <h3>3. –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏</h3>
        <button onclick="getMyApplications()">–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –æ—Ç–∫–ª–∏–∫–∏</button>
        <div id="applications"></div>
    </div>

    <script>
        const token = localStorage.getItem('auth_token');
        
        async function uploadResume() {
            const file = document.getElementById('resumeFile').files[0];
            if (!file) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ');
                return;
            }
            await uploadResumeToProfile(file, token);
        }
        
        async function applyToJob() {
            const jobId = document.getElementById('jobId').value;
            if (!jobId) {
                alert('–í–≤–µ–¥–∏—Ç–µ ID –≤–∞–∫–∞–Ω—Å–∏–∏');
                return;
            }
            await applyToJob(jobId, token);
        }
        
        async function getMyApplications() {
            const applications = await getMyApplications(token);
            const div = document.getElementById('applications');
            div.innerHTML = applications.map(app => 
                \`<div>–í–∞–∫–∞–Ω—Å–∏—è: \${app.job.title} - –°—Ç–∞—Ç—É—Å: \${app.status}</div>\`
            ).join('');
        }
    </script>
</body>
</html>
`;

console.log('HTML –ø—Ä–∏–º–µ—Ä:', htmlExample);

module.exports = {
  applyToJob,
  uploadResumeToProfile,
  getMyApplications
};
