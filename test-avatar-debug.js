const axios = require('axios');

async function testAvatarUpload() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–≤–∞—Ç–∞—Ä–∞...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...');
    try {
      const healthResponse = await axios.get('http://localhost:3000');
      console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
    } catch (error) {
      console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return;
    }

    // 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('\n2Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const loginResponse = await axios.post('http://localhost:3000/auth/login', {
      email: 'admin@example.com',
      password: 'password123'
    });

    const token = loginResponse.data.access_token;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    console.log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
    const FormData = require('form-data');
    const fs = require('fs');
    const path = require('path');

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1x1 –ø–∏–∫—Å–µ–ª—å
    const pngData = Buffer.from([
      0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
      0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, // IHDR chunk
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // 1x1 dimensions
      0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, 0xDE, // IHDR data
      0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41, 0x54, // IDAT chunk
      0x08, 0x99, 0x01, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, // IDAT data
      0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 // IEND chunk
    ]);

    const testImagePath = path.join(__dirname, 'test-avatar.png');
    fs.writeFileSync(testImagePath, pngData);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');

    // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä
    console.log('\n4Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä...');
    const formData = new FormData();
    formData.append('file', fs.createReadStream(testImagePath), {
      filename: 'test-avatar.png',
      contentType: 'image/png'
    });

    try {
      const uploadResponse = await axios.post(
        'http://localhost:3000/profiles/avatar/upload',
        formData,
        {
          headers: {
            ...formData.getHeaders(),
            'Authorization': `Bearer ${token}`
          },
          timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        }
      );

      console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(uploadResponse.data, null, 2));
    } catch (uploadError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞:');
      console.log('   –°—Ç–∞—Ç—É—Å:', uploadError.response?.status);
      console.log('   –î–∞–Ω–Ω—ã–µ:', uploadError.response?.data);
      console.log('   –°–æ–æ–±—â–µ–Ω–∏–µ:', uploadError.message);
    }

    // 5. –û—á–∏—Å—Ç–∫–∞
    console.log('\n5Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞...');
    fs.unlinkSync(testImagePath);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

testAvatarUpload();
